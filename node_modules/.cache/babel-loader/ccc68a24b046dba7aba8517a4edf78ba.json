{"ast":null,"code":"const initialState = {\n  items: [],\n  isLoading: false\n};\n\nconst findDay = (day, dayWeek) => {\n  let date = new Date(day.dt_txt).toLocaleString(\"ru\", {\n    weekday: \"long\"\n  });\n  return date === dayWeek;\n};\n\nconst week = arr => {\n  const result = arr.reduce((arr, dayWeek) => {\n    let date = new Date(dayWeek.dt_txt).toLocaleString(\"ru\", {\n      weekday: \"long\"\n    });\n\n    if (!arr.includes(date)) {\n      return [...arr, date];\n    }\n\n    return arr;\n  }, []);\n  return result;\n};\n\nconst createArr = arr => {\n  return arr.map(elem => {\n    let time = new Date(elem.dt_txt).toLocaleString(\"ru\", {\n      month: \"long\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"numeric\"\n    });\n    console.log(time.split());\n    return {\n      time,\n      temp: Math.ceil(elem.main.temp),\n      feels_like: Math.ceil(elem.main.feels_like),\n      weather: elem.weather[0]\n    };\n  });\n};\n\nconst weather = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SET_DATA_WEATHER':\n      const newItems = week(action.payload.list).map(item => {\n        return {\n          day: item,\n          data: createArr(action.payload.list.filter(day => findDay(day, item)))\n        };\n      });\n      return { ...state,\n        items: newItems,\n        isLoading: false\n      };\n\n    case 'SET_LOADING':\n      return { ...state,\n        isLoading: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default weather;","map":{"version":3,"sources":["C:/My project/react-weather-forecast/app-weather-forecast/src/redux/reducers/weather.js"],"names":["initialState","items","isLoading","findDay","day","dayWeek","date","Date","dt_txt","toLocaleString","weekday","week","arr","result","reduce","includes","createArr","map","elem","time","month","hour","minute","console","log","split","temp","Math","ceil","main","feels_like","weather","state","action","type","newItems","payload","list","item","data","filter"],"mappings":"AAEA,MAAMA,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,SAAS,EAAE;AAFM,CAArB;;AAMA,MAAMC,OAAO,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAC9B,MAAIC,IAAI,GAAG,IAAIC,IAAJ,CAASH,GAAG,CAACI,MAAb,EAAqBC,cAArB,CAAoC,IAApC,EAA0C;AAACC,IAAAA,OAAO,EAAE;AAAV,GAA1C,CAAX;AACA,SAAOJ,IAAI,KAAKD,OAAhB;AACH,CAHD;;AAKA,MAAMM,IAAI,GAAIC,GAAD,IAAS;AAClB,QAAMC,MAAM,GAAID,GAAG,CAACE,MAAJ,CAAW,CAACF,GAAD,EAAMP,OAAN,KAAkB;AACzC,QAAIC,IAAI,GAAG,IAAIC,IAAJ,CAASF,OAAO,CAACG,MAAjB,EAAyBC,cAAzB,CAAwC,IAAxC,EAA8C;AAACC,MAAAA,OAAO,EAAE;AAAV,KAA9C,CAAX;;AACA,QAAG,CAACE,GAAG,CAACG,QAAJ,CAAaT,IAAb,CAAJ,EAAuB;AACnB,aAAO,CAAC,GAAGM,GAAJ,EAASN,IAAT,CAAP;AACH;;AACD,WAAOM,GAAP;AACH,GANe,EAMb,EANa,CAAhB;AAOA,SAAOC,MAAP;AACH,CATD;;AAYA,MAAMG,SAAS,GAAIJ,GAAD,IAAS;AACvB,SACIA,GAAG,CAACK,GAAJ,CAAUC,IAAI,IAAI;AACd,QAAIC,IAAI,GAAG,IAAIZ,IAAJ,CAAUW,IAAI,CAACV,MAAf,EAAwBC,cAAxB,CAAuC,IAAvC,EAA6C;AACxDW,MAAAA,KAAK,EAAE,MADiD;AAExDhB,MAAAA,GAAG,EAAE,SAFmD;AAGxDiB,MAAAA,IAAI,EAAE,SAHkD;AAIxDC,MAAAA,MAAM,EAAE;AAJgD,KAA7C,CAAX;AAMAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACM,KAAL,EAAZ;AACA,WAAO;AACHN,MAAAA,IADG;AAEHO,MAAAA,IAAI,EAAEC,IAAI,CAACC,IAAL,CAAUV,IAAI,CAACW,IAAL,CAAUH,IAApB,CAFH;AAGHI,MAAAA,UAAU,EAAEH,IAAI,CAACC,IAAL,CAAUV,IAAI,CAACW,IAAL,CAAUC,UAApB,CAHT;AAIHC,MAAAA,OAAO,EAAEb,IAAI,CAACa,OAAL,CAAa,CAAb;AAJN,KAAP;AAMC,GAdL,CADJ;AAkBH,CAnBD;;AAqBA,MAAMA,OAAO,GAAG,CAACC,KAAK,GAAGhC,YAAT,EAAuBiC,MAAvB,KAAkC;AAC9C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,kBAAL;AAEI,YAAMC,QAAQ,GAAGxB,IAAI,CAACsB,MAAM,CAACG,OAAP,CAAeC,IAAhB,CAAJ,CAA0BpB,GAA1B,CAA8BqB,IAAI,IAAI;AACnD,eAAO;AACHlC,UAAAA,GAAG,EAAEkC,IADF;AAEHC,UAAAA,IAAI,EAAEvB,SAAS,CAAEiB,MAAM,CAACG,OAAP,CAAeC,IAAf,CAAoBG,MAApB,CAA2BpC,GAAG,IAAID,OAAO,CAACC,GAAD,EAAMkC,IAAN,CAAzC,CAAF;AAFZ,SAAP;AAIH,OALgB,CAAjB;AAOA,aAAO,EACH,GAAGN,KADA;AAEH/B,QAAAA,KAAK,EAAEkC,QAFJ;AAGHjC,QAAAA,SAAS,EAAE;AAHR,OAAP;;AAKJ,SAAK,aAAL;AACI,aAAO,EACH,GAAG8B,KADA;AAEH9B,QAAAA,SAAS,EAAE+B,MAAM,CAACG;AAFf,OAAP;;AAIJ;AACI,aAAOJ,KAAP;AArBR;AAuBH,CAxBD;;AA0BA,eAAeD,OAAf","sourcesContent":["\r\n\r\nconst initialState = {\r\n    items: [],\r\n    isLoading: false\r\n}\r\n\r\n\r\nconst findDay = (day, dayWeek) => {\r\n    let date = new Date(day.dt_txt).toLocaleString(\"ru\", {weekday: \"long\"});\r\n    return date === dayWeek\r\n}\r\n\r\nconst week = (arr) => {\r\n    const result =  arr.reduce((arr, dayWeek) => {\r\n        let date = new Date(dayWeek.dt_txt).toLocaleString(\"ru\", {weekday: \"long\"});\r\n        if(!arr.includes(date)){\r\n            return [...arr, date]\r\n        }\r\n        return arr\r\n    }, [])\r\n    return result\r\n}\r\n\r\n\r\nconst createArr = (arr) => {\r\n    return(\r\n        arr.map(( elem => {\r\n            let time = new Date( elem.dt_txt ).toLocaleString(\"ru\", {\r\n            month: \"long\", \r\n            day: \"numeric\", \r\n            hour: \"numeric\",\r\n            minute: \"numeric\" \r\n            });\r\n            console.log(time.split())\r\n            return {\r\n                time,\r\n                temp: Math.ceil(elem.main.temp), \r\n                feels_like: Math.ceil(elem.main.feels_like),\r\n                weather: elem.weather[0]\r\n                }\r\n            } )\r\n        )\r\n    )\r\n}\r\n\r\nconst weather = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case 'SET_DATA_WEATHER':\r\n\r\n            const newItems = week(action.payload.list).map(item => {\r\n                return {\r\n                    day: item,\r\n                    data: createArr( action.payload.list.filter(day => findDay(day, item)))\r\n                }\r\n            })\r\n\r\n            return {\r\n                ...state,\r\n                items: newItems,\r\n                isLoading: false\r\n            }\r\n        case 'SET_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default weather"]},"metadata":{},"sourceType":"module"}