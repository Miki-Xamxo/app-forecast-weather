{"ast":null,"code":"const initialState = {\n  items: [],\n  isLoading: false\n};\n\nconst findDay = (day, dayWeek) => {\n  let date = new Date(day.dt_txt).toLocaleString(\"ru\", {\n    weekday: \"long\"\n  });\n  return date === dayWeek;\n};\n\nconst week = arr => {\n  const result = arr.reduce((arr, dayWeek) => {\n    let weekday = new Date(dayWeek.dt_txt).toLocaleString(\"ru\", {\n      weekday: \"long\",\n      month: 'long',\n      day: 'numeric'\n    }); // const [week, month] =  weekday.split(',')\n\n    if (!arr.includes(weekday)) {\n      return [...arr, weekday];\n    }\n\n    return arr;\n  }, []);\n  return result;\n};\n\nconst createArr = arr => {\n  return arr.map(elem => {\n    let dateVal = new Date(elem.dt_txt).toLocaleString(\"ru\", {\n      hour: \"numeric\",\n      minute: \"numeric\"\n    });\n    const [date, time] = dateVal.split(',');\n    return {\n      date,\n      time,\n      temp: Math.ceil(elem.main.temp),\n      feels_like: Math.ceil(elem.main.feels_like),\n      weather: elem.weather[0]\n    };\n  });\n};\n\nconst weather = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SET_DATA_WEATHER':\n      const newItems = week(action.payload.list).map((item, i, arr) => {\n        const [week, date] = item.split(',');\n        return {\n          day: week,\n          month: date,\n          data: createArr(action.payload.list.filter(day => findDay(day, week)))\n        };\n      });\n      return { ...state,\n        items: newItems,\n        isLoading: false\n      };\n\n    case 'SET_LOADING':\n      return { ...state,\n        isLoading: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default weather;","map":{"version":3,"sources":["C:/My project/react-weather-forecast/app-weather-forecast/src/redux/reducers/weather.js"],"names":["initialState","items","isLoading","findDay","day","dayWeek","date","Date","dt_txt","toLocaleString","weekday","week","arr","result","reduce","month","includes","createArr","map","elem","dateVal","hour","minute","time","split","temp","Math","ceil","main","feels_like","weather","state","action","type","newItems","payload","list","item","i","data","filter"],"mappings":"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","sourcesContent":["\r\n\r\nconst initialState = {\r\n    items: [],\r\n    isLoading: false\r\n}\r\n\r\n\r\nconst findDay = (day, dayWeek) => {\r\n    let date = new Date(day.dt_txt).toLocaleString(\"ru\", {weekday: \"long\"});\r\n    return date === dayWeek\r\n}\r\n\r\nconst week = (arr) => {\r\n    const result =  arr.reduce((arr, dayWeek) => {\r\n        let weekday = new Date(dayWeek.dt_txt).toLocaleString(\"ru\", {weekday: \"long\", month: 'long', day: 'numeric'});\r\n        // const [week, month] =  weekday.split(',')\r\n        if(!arr.includes(weekday)){\r\n            return [...arr, weekday]\r\n        }\r\n        return arr\r\n    }, [])\r\n    return result\r\n}\r\n\r\n\r\nconst createArr = (arr) => {\r\n    return(\r\n        arr.map(( elem => {\r\n            let dateVal = new Date( elem.dt_txt ).toLocaleString(\"ru\", {\r\n            hour: \"numeric\",\r\n            minute: \"numeric\" \r\n            });\r\n            const [date, time] = dateVal.split(',')\r\n            return {\r\n                date,\r\n                time,\r\n                temp: Math.ceil(elem.main.temp), \r\n                feels_like: Math.ceil(elem.main.feels_like),\r\n                weather: elem.weather[0]\r\n                }\r\n            } )\r\n        )\r\n    )\r\n}\r\n\r\nconst weather = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case 'SET_DATA_WEATHER':\r\n            const newItems = week(action.payload.list).map((item, i, arr) => {\r\n                const [week, date] = item.split(',')\r\n                return {\r\n                    day: week,\r\n                    month: date,\r\n                    data: createArr( action.payload.list.filter(day => findDay(day, week)))\r\n                }\r\n            })\r\n\r\n            return {\r\n                ...state,\r\n                items: newItems,\r\n                isLoading: false\r\n            }\r\n        case 'SET_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default weather"]},"metadata":{},"sourceType":"module"}