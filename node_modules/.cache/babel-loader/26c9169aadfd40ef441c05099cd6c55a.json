{"ast":null,"code":"var _jsxFileName = \"C:\\\\My project\\\\react-weather-forecast\\\\app-weather-forecast\\\\src\\\\components\\\\MainContainer.jsx\",\n    _s = $RefreshSig$();\n\nimport react, { useEffect, useState } from 'react';\nimport Main from './Main';\nimport { weatherApi } from '../api/api';\nimport Searching from './Searching';\nimport Loader from '../loader/Loader';\nimport WeeksForecastContainer from './WeeksForecastContainer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MainContainer = () => {\n  _s();\n\n  const [isLoader, setIsLoader] = useState(true);\n  const [currentGeo, setCurrentGeo] = useState({});\n  const [isSearching, setIsSearching] = useState(false);\n  const [weekForecast, setWeekForecast] = useState({\n    isOpen: false,\n    city: null\n  });\n  const [locations, setLocations] = useState([]);\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(data => {\n      weatherApi.byCoord(data.coords.latitude, data.coords.longitude).then(res => {\n        let {\n          temp,\n          feels_like\n        } = res.data.main;\n        let {\n          name\n        } = res.data;\n        let {\n          description,\n          main: icon\n        } = res.data.weather[0];\n        setCurrentGeo({\n          temp,\n          feels_like,\n          name,\n          description,\n          icon\n        });\n        setIsLoader(false);\n      });\n    }, () => {\n      alert(\"Ошибка! Вы не дали доступа к гео-позиции!\");\n    });\n  }, []);\n  useEffect(() => {\n    let elements = JSON.parse(localStorage.getItem('locations')) || [];\n    elements.forEach(elem => getWeatherByName(elem));\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('locations', JSON.stringify(locations.map(elem => elem.name)));\n  }, [locations]);\n\n  const getWeatherByName = cityName => {\n    if (!locations.some(loc => loc.name == cityName)) {\n      setIsLoader(true);\n      weatherApi.byCityName(cityName).then(res => {\n        let {\n          temp,\n          feels_like\n        } = res.data.main;\n        let {\n          description,\n          main: icon\n        } = res.data.weather[0];\n        setLocations(prevLocations => [{\n          temp,\n          feels_like,\n          name: cityName,\n          description,\n          icon,\n          id: 1\n        }, ...prevLocations]);\n        setIsLoader(false);\n      }).catch(err => {\n        alert(`Город ${cityName} не найден :(`);\n      });\n    } else alert(`Вы уже добавили город ${cityName}`);\n  };\n\n  const deleteCity = cityName => {\n    setLocations(prevLocations => prevLocations.filter(loc => loc.name !== cityName));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\n    /*#__PURE__*/\n    // isLoader \n    // ? <Loader />\n    _jsxDEV(Main, {\n      currentGeo: currentGeo,\n      setIsSearching: setIsSearching,\n      isSearching: isSearching,\n      locations: locations,\n      deleteCity: deleteCity,\n      setWeekForecast: setWeekForecast,\n      isFixed: weekForecast.isOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), isSearching && /*#__PURE__*/_jsxDEV(Searching, {\n      setIsSearching: setIsSearching,\n      getWeatherByName: getWeatherByName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), weekForecast.isOpen && /*#__PURE__*/_jsxDEV(WeeksForecastContainer, {\n      city: weekForecast.city\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MainContainer, \"ICOGzySLVbPPGpCzu0liOjkOU4s=\");\n\n_c = MainContainer;\nexport default MainContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainContainer\");","map":{"version":3,"sources":["C:/My project/react-weather-forecast/app-weather-forecast/src/components/MainContainer.jsx"],"names":["react","useEffect","useState","Main","weatherApi","Searching","Loader","WeeksForecastContainer","MainContainer","isLoader","setIsLoader","currentGeo","setCurrentGeo","isSearching","setIsSearching","weekForecast","setWeekForecast","isOpen","city","locations","setLocations","navigator","geolocation","getCurrentPosition","data","byCoord","coords","latitude","longitude","then","res","temp","feels_like","main","name","description","icon","weather","alert","elements","JSON","parse","localStorage","getItem","forEach","elem","getWeatherByName","setItem","stringify","map","cityName","some","loc","byCityName","prevLocations","id","catch","err","deleteCity","filter"],"mappings":"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","sourcesContent":["import react, {useEffect, useState} from 'react';\r\nimport Main from './Main';\r\nimport {weatherApi} from '../api/api';\r\nimport Searching from './Searching';\r\nimport Loader from '../loader/Loader';\r\nimport WeeksForecastContainer from './WeeksForecastContainer';\r\n\r\nconst MainContainer = () => {\r\n\r\n    const [isLoader, setIsLoader] = useState(true);\r\n    const [currentGeo, setCurrentGeo] = useState({});\r\n    const [isSearching, setIsSearching] = useState(false);\r\n    const [weekForecast, setWeekForecast] = useState({ isOpen: false, city: null });\r\n    const [locations, setLocations] = useState([]);\r\n\r\n    useEffect( () => {\r\n        navigator.geolocation.getCurrentPosition( (data) => {\r\n            weatherApi.byCoord(data.coords.latitude, data.coords.longitude).then( res => {\r\n\r\n                let {temp,feels_like} = res.data.main;\r\n                let {name} = res.data;\r\n                let {description,main:icon} = res.data.weather[0];\r\n                setCurrentGeo({temp,feels_like,name,description,icon});\r\n                setIsLoader(false);\r\n\r\n            } )\r\n        }, () => {\r\n            alert(\"Ошибка! Вы не дали доступа к гео-позиции!\")\r\n        } );\r\n\r\n    }, []);\r\n\r\n    useEffect( () => {\r\n        let elements  = JSON.parse( localStorage.getItem('locations') ) || [];\r\n        elements.forEach( elem => getWeatherByName(elem) );\r\n    }, [] )\r\n\r\n    useEffect( () => {\r\n        localStorage.setItem( 'locations', JSON.stringify( locations.map( elem => elem.name ) ) )\r\n    }, [locations] )\r\n\r\n    const getWeatherByName = (cityName) => {\r\n        if( !locations.some( loc => loc.name == cityName ) ){\r\n            setIsLoader(true);\r\n            weatherApi.byCityName(cityName)\r\n            .then( res => {\r\n    \r\n                let {temp, feels_like} = res.data.main;\r\n                let {description, main:icon} = res.data.weather[0];\r\n                \r\n                setLocations( prevLocations => [ {temp, feels_like, name: cityName, description, icon, id: 1} , ...prevLocations ] );\r\n                setIsLoader(false);\r\n            } )\r\n            .catch( err => {\r\n                alert(`Город ${cityName} не найден :(`)\r\n            });\r\n        } else alert(`Вы уже добавили город ${cityName}`)\r\n    }\r\n\r\n    const deleteCity = (cityName) => {\r\n        setLocations( prevLocations => prevLocations.filter( loc => loc.name !== cityName ) );\r\n    }\r\n\r\n    return(\r\n        <>\r\n        {\r\n        // isLoader \r\n        // ? <Loader />\r\n        <Main     \r\n          currentGeo = {currentGeo} \r\n          setIsSearching = {setIsSearching}\r\n          isSearching = {isSearching} \r\n          locations = {locations} \r\n          deleteCity = {deleteCity} \r\n          setWeekForecast = {setWeekForecast}\r\n          isFixed = {weekForecast.isOpen} />\r\n        }\r\n        { isSearching && \r\n        <Searching\r\n        setIsSearching = {setIsSearching}\r\n        getWeatherByName = {getWeatherByName}/> }\r\n        \r\n        { weekForecast.isOpen &&\r\n        <WeeksForecastContainer city = { weekForecast.city } />\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainContainer;"]},"metadata":{},"sourceType":"module"}