{"ast":null,"code":"const initialState = {\n  items: [],\n  isLoading: false\n};\n\nconst findDay = (day, dayWeek) => {\n  let date = new Date(day.dt_txt).toLocaleString(\"ru\", {\n    weekday: \"long\"\n  }); // console.log(date)\n\n  return date === dayWeek;\n};\n\nconst createArr = arr => {\n  return arr.map(elem => {\n    let time = new Date(elem.dt_txt).toLocaleString(\"ru\", {\n      month: \"long\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"numeric\"\n    });\n    return {\n      time,\n      temp: elem.main.temp,\n      feels_like: elem.main.feels_like,\n      weather: elem.weather[0]\n    };\n  });\n};\n\nconst weather = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SET_DATA_WEATHER':\n      let week = [{\n        day: 'понедельник',\n        data: createArr(action.payload.list.filter(day => findDay(day, 'понедельник')))\n      }, {\n        day: 'вторник',\n        data: createArr(action.payload.list.filter(day => findDay(day, 'вторник')))\n      }, {\n        day: 'среда',\n        data: createArr(action.payload.list.filter(day => findDay(day, 'среда')))\n      }, {\n        day: 'четверг',\n        data: createArr(action.payload.list.filter(day => findDay(day, 'четверг')))\n      }, {\n        day: 'пятница',\n        data: createArr(action.payload.list.filter(day => findDay(day, 'пятница')))\n      }, {\n        day: 'суббота',\n        data: createArr(action.payload.list.filter(day => findDay(day, 'суббота')))\n      }, {\n        day: 'воскресенье',\n        data: createArr(action.payload.list.filter(day => findDay(day, 'воскресенье')))\n      }];\n      return { ...state,\n        items: week,\n        isLoading: false\n      };\n\n    case 'SET_LOADING':\n      return { ...state,\n        isLoading: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default weather;","map":{"version":3,"sources":["C:/My project/react-weather-forecast/app-weather-forecast/src/redux/reducers/weather.js"],"names":["initialState","items","isLoading","findDay","day","dayWeek","date","Date","dt_txt","toLocaleString","weekday","createArr","arr","map","elem","time","month","hour","minute","temp","main","feels_like","weather","state","action","type","week","data","payload","list","filter"],"mappings":"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","sourcesContent":["\r\n\r\nconst initialState = {\r\n    items: [],\r\n    isLoading: false\r\n}\r\nconst findDay = (day, dayWeek) => {\r\n    let date = new Date(day.dt_txt).toLocaleString(\"ru\", {weekday: \"long\"} );\r\n    // console.log(date)\r\n    return date === dayWeek\r\n}\r\n\r\n\r\nconst createArr = (arr) => {\r\n    return(\r\n        arr.map( ( elem => {\r\n            let time = new Date( elem.dt_txt ).toLocaleString(\"ru\", {\r\n            month: \"long\", \r\n            day: \"numeric\", \r\n            hour: \"numeric\",\r\n            minute: \"numeric\" } );\r\n            return {\r\n                time,\r\n                temp: elem.main.temp, \r\n                feels_like: elem.main.feels_like,\r\n                weather: elem.weather[0]\r\n                }\r\n            } )\r\n        )\r\n    )\r\n}\r\n\r\nconst weather = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case 'SET_DATA_WEATHER':\r\n\r\n            let week = [\r\n                { day: 'понедельник', data: createArr( action.payload.list.filter( (day) => findDay( day, 'понедельник') ) ) },\r\n                { day: 'вторник', data: createArr( action.payload.list.filter( (day) => findDay( day, 'вторник') ) ) },\r\n                { day: 'среда', data: createArr( action.payload.list.filter( (day) => findDay( day, 'среда') ) ) },\r\n                { day: 'четверг', data: createArr( action.payload.list.filter( (day) => findDay( day, 'четверг') ) ) },\r\n                { day: 'пятница', data: createArr( action.payload.list.filter( (day) => findDay( day, 'пятница') ) ) },\r\n                { day: 'суббота', data: createArr( action.payload.list.filter( (day) => findDay( day, 'суббота') ) ) },\r\n                { day: 'воскресенье', data: createArr( action.payload.list.filter( (day) => findDay( day, 'воскресенье') ) ) },\r\n            ]\r\n\r\n            return {\r\n                ...state,\r\n                items: week,\r\n                isLoading: false\r\n            }\r\n        case 'SET_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default weather"]},"metadata":{},"sourceType":"module"}